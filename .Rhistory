legend.text = ggplot2::element_text(color = "black", size = 12)
)
cat(crayon::blue$bold("Creating summary chart...\n"))
bar_plot <- ggplot2::ggplot(national_summary,
ggplot2::aes(
x = `Travel time`,
y = (`Percentage of the population` + 24)/3,
fill = `Travel time`
)) +
ggplot2::geom_col(show.legend = F) +
ggplot2::coord_flip() +
ggplot2::scale_fill_manual(
values = c(
">120" = "#08306b",
"91-120" = "#2171b5",
"61-90" = "#6baed6",
"31-60" = "#c6dbef",
"<=30" = "#f7fbff"
),
na.value = "#d9d9d9"
) +
ggplot2::geom_text(
ggplot2::aes(label = paste0(round(`Percentage of the population`, 1), "%"), y = 15),
size = 4.5,
position = ggplot2::position_dodge(width = 0.9),
hjust = 0,
color = "black"
) +
ggplot2::theme_void() +
ggplot2::theme(
axis.text.y = ggplot2::element_text(color = "black", size = 12),
plot.margin = ggplot2::margin(t = 5,
r = 0,
b = 0,
l = 10)
)
cat(crayon::blue$bold("Combining plots...\n"))
combined_plot <- cowplot::ggdraw() +
cowplot::draw_plot(map_plot,x = 0,y = 0,height = 1,width = 0.75) +
cowplot::draw_plot(
bar_plot,
x = 0.6,
y = 0.3,
hjust = 0,
vjust = 0,
width = 0.28,
height = 0.42
) +
ggplot2::theme(
panel.background = ggplot2::element_blank(),
axis.line = ggplot2::element_blank(),
axis.text = ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank(),
axis.title = ggplot2::element_blank(),
panel.grid.major = ggplot2::element_blank(), # optional - remove gridlines
panel.grid.minor = ggplot2::element_blank(), # optional - remove gridlines
plot.background = ggplot2::element_rect(fill = 'transparent', color = NA),
legend.background = ggplot2::element_rect(fill = 'transparent'),
legend.box.background = ggplot2::element_rect(fill = 'transparent', color = NA),
legend.key = ggplot2::element_rect(fill = "transparent"), # remove grey background color of the key
legend.margin =  ggplot2::margin(0,0,0,0,unit = "pt")
)
cat(crayon::blue$bold("Saving outputs...\n"))
ggplot2::ggsave(
plot = combined_plot,
filename = file.path(path, paste0(name, '_combined_plot.png')),
dpi = saving_list$dpi,
width = 2 * saving_list$width * 5,
height = saving_list$height * 5,
units = "in",
bg = NULL
)
ggplot2::ggsave(
plot = map_plot,
filename = file.path(path, paste0(name, '_map_plot.png')),
dpi = saving_list$dpi,
width = saving_list$width * 5,
height = saving_list$height * 5,
units = "in",
bg = NULL
)
ggplot2::ggsave(
plot = bar_plot,
filename = file.path(path, paste0(name, '_bar_plot.png')),
dpi = saving_list$dpi,
width = saving_list$width * 5,
height = saving_list$height * 5,
units = "in",
bg = NULL
)
if (!is.null(name)) {
data.table::fwrite(national_summary, file = file.path(path, paste0(name, '_national_summary.csv')))
} else {
data.table::fwrite(national_summary, file = file.path(path, 'national_summary.csv'))
}
cat(crayon::blue$bold("Files saved to:", path, "\n"))
return(
list(
national_summary = national_summary,
map_plot = map_plot,
bar_plot = bar_plot,
combined_plot = combined_plot,
access = access,
temp_df = temp_df
)
)
}
result <- accessibility(
points = facility_coords,
label = "Health Facilities",
name = "kenya_health_access"
)
#' )
#'
#' # High-resolution outputs
#' result <- accessibility(
#'   points = facility_coords,
#'   saving_list = list(dpi = 2000, width = 2, height = 2),
#'   name = "high_res_analysis"
#' )
#' }
#'
accessibility <- \(
points,
transitionMatrix = NULL,
populationRaster = NULL,
label = "facilities",
adm0 = NULL,
adm1 = NULL,
path = ".",
saving_list = list(dpi = 1e3, width = 1, height = 1, units = "in"),
name = NULL
) {
if (!inherits(points, "matrix")) {
points <- as.matrix(points)
}
colnames(points) <- c("lng", "lat")
cat(crayon::blue$bold("Starting accessibility analysis...\n"))
if (is.null(populationRaster)) {
populationRaster <- raster::raster(system.file("extdata", "ken_ppp_2020_UNadj_constrained.tif", package = "accessMap"))
}
if (is.null(transitionMatrix)) {
transitionMatrix <- readRDS(system.file("extdata", "kenya_transition_matrix.RDS", package = "accessMap"))
}
if (is.null(adm0)) {
adm0 <- sf::st_read(system.file("extdata", "gadm41_KEN_0.shp", package = "accessMap"), quiet = T)
}
if (is.null(adm1)) {
adm1 <- sf::st_read(system.file("extdata", "gadm41_KEN_1.shp", package = "accessMap"), quiet = T)
}
cat(crayon::blue$bold("Computing travel costs...\n"))
access <- gdistance::accCost(transitionMatrix, points)
raster::crs(access) <- raster::crs(populationRaster)
cat(crayon::green("[DONE] Travel time calculation completed\n"))
cat(crayon::blue$bold("Resampling population raster file...\n"))
pop <- raster::raster(terra::resample(
terra::rast(populationRaster),
terra::rast(access),
method = "sum",
threads = T
))
temp <- raster::stack(pop, access)
temp_df <- data.table::as.data.table(terra::rast(temp), xy = T) |>
_[, data.table::setnames(.SD, c("x", "y", "ken_pop_count", "travel_time"))] |>
_[is.finite(travel_time)] |>
_[, cat_travel_time := data.table::fcase(
travel_time <= 30,  "<=30",
travel_time > 30 & travel_time <= 60, "31-60",
travel_time > 60 & travel_time <= 90, "61-90",
travel_time > 90 & travel_time <= 120, "91-120",
travel_time > 120, ">120",
default = NA_character_
)]
cat(crayon::blue$bold("Generating summary statistics...\n"))
national_summary <- data.table::copy(temp_df[, .(pop = sum(ken_pop_count, na.rm = T)), by = cat_travel_time]) |>
_[, percent := pop/sum(pop, na.rm = T)*1e2] |>
_[, data.table::setnames(.SD, c("Travel time", "Population", "Percentage of the population"))] |>
_[, let(
`Travel time` = factor(`Travel time`, levels = c(
">120",
"91-120",
"61-90",
"31-60",
"<=30"
))
)][]
cat(crayon::blue$bold("Building accessibility map...\n"))
map_plot <-
ggplot2::ggplot() +
ggplot2::geom_sf(data = adm0, fill = "white", alpha = 1, show.legend = NA, color = NA) +
ggplot2::geom_raster(
data = temp_df,
ggplot2::aes(
x = x,
y = y,
fill = factor(cat_travel_time)
),
interpolate = FALSE,
show.legend = NA
) +
ggplot2::scale_fill_manual(
values = c(
">120" = "#08306b",
"91-120" = "#2171b5",
"61-90" = "#6baed6",
"31-60" = "#c6dbef",
"<=30" = "#f7fbff"
),
guide = "none",
na.value = "#969696"
) +
ggplot2::geom_sf(data = adm1, fill = NA, lwd = 0.1, colour = "black") +
ggspatial::annotation_scale(
location = "bl",
width_hint = 0.25,
pad_x = ggplot2::unit(0.26, "in"),
pad_y = ggplot2::unit(0.4, "in"),
height = ggplot2::unit(0.15, "cm")
) +
ggspatial::annotation_north_arrow(
location = "bl",
which_north = "true",
pad_x = ggplot2::unit(0.57, "in"),
pad_y = ggplot2::unit(0.6, "in"),
height = ggplot2::unit(0.9, "cm"),
width = ggplot2::unit(0.81, "cm"),
style = ggspatial::north_arrow_fancy_orienteering(text_size = 10)
) +
ggplot2::geom_point(
data = data.table::as.data.table(points),
ggplot2::aes(x = lng, y = lat, color = "value"),
size = 4.5,
shape = "+"
) +
ggplot2::scale_colour_manual(
name = " ",
values = "red",
labels = label,
guide = ggplot2::guide_legend()
) +
ggplot2::theme_void() +
ggplot2::theme(
legend.position = "bottom",
legend.key = ggplot2::element_rect(color = "black", fill = NA),
legend.text = ggplot2::element_text(color = "black", size = 12)
)
cat(crayon::blue$bold("Creating summary chart...\n"))
bar_plot <- ggplot2::ggplot(national_summary,
ggplot2::aes(
x = `Travel time`,
y = (`Percentage of the population` + 24)/3,
fill = `Travel time`
)) +
ggplot2::geom_col(show.legend = F) +
ggplot2::coord_flip() +
ggplot2::scale_fill_manual(
values = c(
">120" = "#08306b",
"91-120" = "#2171b5",
"61-90" = "#6baed6",
"31-60" = "#c6dbef",
"<=30" = "#f7fbff"
),
na.value = "#d9d9d9"
) +
ggplot2::geom_text(
ggplot2::aes(label = paste0(round(`Percentage of the population`, 1), "%"), y = 15),
size = 4.5,
position = ggplot2::position_dodge(width = 0.9),
hjust = 0,
color = "black"
) +
ggplot2::theme_void() +
ggplot2::theme(
axis.text.y = ggplot2::element_text(color = "black", size = 12),
plot.margin = ggplot2::margin(t = 5,
r = 0,
b = 0,
l = 10)
)
cat(crayon::blue$bold("Combining plots...\n"))
combined_plot <- cowplot::ggdraw() +
cowplot::draw_plot(map_plot,x = 0,y = 0,height = 1,width = 0.75) +
cowplot::draw_plot(
bar_plot,
x = 0.6,
y = 0.3,
hjust = 0,
vjust = 0,
width = 0.28,
height = 0.42
) +
ggplot2::theme(
panel.background = ggplot2::element_blank(),
axis.line = ggplot2::element_blank(),
axis.text = ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank(),
axis.title = ggplot2::element_blank(),
panel.grid.major = ggplot2::element_blank(), # optional - remove gridlines
panel.grid.minor = ggplot2::element_blank(), # optional - remove gridlines
plot.background = ggplot2::element_rect(fill = 'transparent', color = NA),
legend.background = ggplot2::element_rect(fill = 'transparent'),
legend.box.background = ggplot2::element_rect(fill = 'transparent', color = NA),
legend.key = ggplot2::element_rect(fill = "transparent"), # remove grey background color of the key
legend.margin =  ggplot2::margin(0,0,0,0,unit = "pt")
)
cat(crayon::blue$bold("Saving outputs...\n"))
ggplot2::ggsave(
plot = combined_plot,
filename = file.path(path, paste0(name, '_combined_plot.png')),
dpi = saving_list$dpi,
width = 2 * saving_list$width * 5,
height = saving_list$height * 5,
units = "in",
bg = NULL
)
ggplot2::ggsave(
plot = map_plot,
filename = file.path(path, paste0(name, '_map_plot.png')),
dpi = saving_list$dpi,
width = saving_list$width * 5,
height = saving_list$height * 5,
units = "in",
bg = NULL
)
ggplot2::ggsave(
plot = bar_plot,
filename = file.path(path, paste0(name, '_bar_plot.png')),
dpi = saving_list$dpi,
width = saving_list$width * 5,
height = saving_list$height * 5,
units = "in",
bg = NULL
)
if (!is.null(name)) {
data.table::fwrite(national_summary, file = file.path(path, paste0(name, '_national_summary.csv')))
} else {
data.table::fwrite(national_summary, file = file.path(path, 'national_summary.csv'))
}
cat(crayon::blue$bold("Files saved to:", path, "\n"))
return(
list(
national_summary = national_summary,
map_plot = map_plot,
bar_plot = bar_plot,
combined_plot = combined_plot,
access = access,
temp_df = temp_df
)
)
}
result <- accessibility(
points = facility_coords,
label = "Health Facilities",
name = "kenya_health_access"
)
devtools::clean_dll()
devtools::build()
devtools::install(force = T)
rm(accessibility)
facility_coords <- matrix(c(36.8, -1.3, 37.0, -1.5), ncol = 2, byrow = TRUE)
n
result <- accessibility(
points = facility_coords,
label = "Health Facilities",
name = "kenya_health_access"
)
rm(accessibility)
access
points = facility_coords
facility_coords <- matrix(c(36.8, -1.3, 37.0, -1.5), ncol = 2, byrow = TRUE)
points = facility_coords
label = "Health Facilities"
name = "kenya_health_access"
if (!inherits(points, "matrix")) {
points <- as.matrix(points)
}
colnames(points) <- c("lng", "lat")
cat(crayon::blue$bold("Starting accessibility analysis...\n"))
if (is.null(populationRaster)) {
populationRaster <- raster::raster(system.file("extdata", "ken_ppp_2020_UNadj_constrained.tif", package = "accessMap"))
}
adm0 = NULL
adm1 = NULL
path = "."
name = NULL
saving_list = list(dpi = 1e3, width = 1, height = 1, units = "in")
populationRaster = NULL
transitionMatrix = NULL
if (!inherits(points, "matrix")) {
points <- as.matrix(points)
}
colnames(points) <- c("lng", "lat")
cat(crayon::blue$bold("Starting accessibility analysis...\n"))
if (is.null(populationRaster)) {
populationRaster <- raster::raster(system.file("extdata", "ken_ppp_2020_UNadj_constrained.tif", package = "accessMap"))
}
if (is.null(transitionMatrix)) {
transitionMatrix <- readRDS(system.file("extdata", "kenya_transition_matrix.RDS", package = "accessMap"))
}
if (is.null(adm0)) {
adm0 <- sf::st_read(system.file("extdata", "gadm41_KEN_0.shp", package = "accessMap"), quiet = T)
}
if (is.null(adm1)) {
adm1 <- sf::st_read(system.file("extdata", "gadm41_KEN_1.shp", package = "accessMap"), quiet = T)
}
cat(crayon::blue$bold("Computing travel costs...\n"))
access <- gdistance::accCost(transitionMatrix, points)
raster::crs(access) <- raster::crs(populationRaster)
cat(crayon::green("[DONE] Travel time calculation completed\n"))
cat(crayon::blue$bold("Resampling population raster file...\n"))
pop <- raster::raster(terra::resample(
terra::rast(populationRaster),
terra::rast(access),
method = "sum",
threads = T
))
temp <- raster::stack(pop, access)
temp
temp_df <- data.table::as.data.table(terra::rast(temp), xy = T) |>
_[, data.table::setnames(.SD, c("x", "y", "ken_pop_count", "travel_time"))] |>
_[is.finite(travel_time)] |>
_[, cat_travel_time := data.table::fcase(
travel_time <= 30,  "<=30",
travel_time > 30 & travel_time <= 60, "31-60",
travel_time > 60 & travel_time <= 90, "61-90",
travel_time > 90 & travel_time <= 120, "91-120",
travel_time > 120, ">120",
default = NA_character_
)]
temp_df
temp_df
# Clean restart
rm(list = ls())  # Clear everything
library(accessMap)
# Test the exact same coordinates
facility_coords <- matrix(c(36.8, -1.3, 37.0, -1.5), ncol = 2, byrow = TRUE)
colnames(facility_coords) <- c("lng", "lat")
result <- accessibility(
points = facility_coords,
label = "Health Facilities",
name = "kenya_health_access"
)
rm(list = ls())
# Clean restart
rm(list = ls())  # Clear everything
library(accessMap)
# Test the exact same coordinates
facility_coords <- matrix(c(36.8, -1.3, 37.0, -1.5), ncol = 2, byrow = TRUE)
colnames(facility_coords) <- c("lng", "lat")
result <- accessibility(
points = facility_coords,
label = "Health Facilities",
name = "kenya_health_access"
)
# Clean everything
devtools::clean_dll()
unloadNamespace("accessMap")
remove.packages("accessMap")
# Check your inst/extdata files are there
list.files("inst/extdata")
# Complete rebuild
devtools::document()
devtools::build()
devtools::install()
# Test
library(accessMap)
result <- accessibility(
points = facility_coords,
label = "Health Facilities",
name = "kenya_health_access"
)
rm(list = ls())
library(accessMap)
facility_coords <- matrix(c(36.8, -1.3, 37.0, -1.5), ncol = 2, byrow = TRUE)
result <- accessibility(
points = facility_coords,
label = "Health Facilities",
name = "kenya_health_access"
)
pacman::p_ver(data.ta])
pacman::p_ver(data.table)
exists("_")
get("_")
?.Primitive("|>")  # If available in your R version
Primitive("|>")
.Primitive("|>")
getRversion()
"|>" %in% ls("package:base")
class(`_`)
1:5 |> length(_)
1:5 |> length(x = _)
devtools::check()
devtools::build()
devtools::clean_dll()
devtools::build()
devtools::install()
?accessibility
facility_coords <- matrix(c(36.8, -1.3, 37.0, -1.5), ncol = 2, byrow = TRUE)
colnames(facility_coords) <- c("lng", "lat")
result <- accessibility(
points = facility_coords,
label = "Health Facilities",
name = "kenya_health_access"
)
remove.packages("accessMap")
pak::pak("cema-uon/accessMap")
pak::pak("cema-uonbi/accessMap")
getwd()
remove.packages("accessMap")
pak::pak("cema-uonbi/accessMap")
pak::pak("cema-uonbi/accessMap")
